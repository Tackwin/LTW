#version 450
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2DMS buffer_normal;
uniform sampler2DMS buffer_position;

uniform vec3 cam_pos;

vec4 texture_fetch(sampler2DMS tex, vec2 c) {
	vec4 ret;
	ivec2 tex_pixel = ivec2(c * vec2(textureSize(tex)));
	int samples = 1;// textureSamples(tex);
	for (int i = 0; i < samples; ++i) {
		ret += texelFetch(tex, tex_pixel, i);
	}
	return ret / float(samples);
}

vec3 diff(
    sampler2DMS buf,
    vec2 x,
    float r
) {
    vec2 radius = vec2(r / textureSize(buf).x, r / textureSize(buf).y);

    vec3 result = vec3(0, 0, 0);
    vec3 dt = vec3(0, 0, 0);

    dt = texture_fetch(buf, x + vec2(-radius.x / 2, 0)).xyz;
    dt = dt - texture_fetch(buf, x + vec2(+radius.x / 2, 0)).xyz;
    result += length(dt);

    dt = texture_fetch(buf, x + vec2(0, -radius.y / 2)).xyz;
    dt = dt - texture_fetch(buf, x + vec2(0, +radius.y / 2)).xyz;
    result += length(dt);

    return result;
}

void main() {
    vec3 frag_pos = texture_fetch(buffer_position, TexCoords).xyz;
    vec3 normal   = texture_fetch(buffer_normal, TexCoords).xyz;
    if (normal.z == 1) discard;

    float edge_width = 2;
    float edge_mult = 1;

    float d = length(frag_pos - cam_pos);
    float cut = 3;
    if (d > cut) {
        edge_mult = 1.0 / (d - cut);
    }

    float dt_drag_pos = length(diff(buffer_position, TexCoords, edge_width));
    if (dt_drag_pos > 0.1) discard;

    FragColor = vec4(edge_mult * diff(buffer_normal, TexCoords, edge_width), 1.0);
}
