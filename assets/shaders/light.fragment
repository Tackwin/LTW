#version 450
precision mediump float;
const int N_Light_Point = 32;
const int N_Light_Dir   = 32;

struct Light_Point {
    float intensity;
    vec3 position;
    vec4 color;
};
uniform int n_light_points;
uniform Light_Point light_points[N_Light_Point];

struct Light_Dir {
	float intensity;
	vec3 dir;
	vec3 color;
};
uniform int n_light_dirs;
uniform Light_Dir light_dirs[N_Light_Dir];

layout (location = 0) out vec4 frag_color;
layout (location = 1) out vec4 glow_buffer;

in vec2 text_coord;

uniform sampler2DMS buffer_position;
uniform sampler2DMS buffer_normal;
uniform sampler2DMS buffer_albedo;
uniform usampler2DMS buffer_tag;
uniform sampler2DMS buffer_velocity;

uniform sampler2D buffer_ssao;

const int Debug_Default = 0;
const int Debug_Albedo = 1;
const int Debug_Normal = 2;
const int Debug_Position = 3;

const int Debug_Depth = 4;

uniform int debug;

uniform float ambient_intensity;
uniform vec4 ambient_color;

vec4 texture_fetch(sampler2DMS tex, vec2 c) {
	vec4 ret;
	ivec2 tex_pixel = ivec2(c * vec2(textureSize(tex)));
	int samples = textureSamples(tex);
	for (int i = 0; i < samples; ++i) {
		ret += texelFetch(tex, tex_pixel, i);
	}
	return ret / float(samples);
}
uvec4 utexture_fetch(usampler2DMS tex, vec2 c) {
	uvec4 ret;
	ivec2 tex_pixel = ivec2(c * vec2(textureSize(tex)));
	int samples = textureSamples(tex);
	for (int i = 0; i < samples; ++i) {
		ret += texelFetch(tex, tex_pixel, i);
	}
	return ret / samples;
}

vec3 light_pixel(vec2 pix) {
	const float root = 0.7;
	const float linear = 0.25;
	const float quadratic = 0.05;
	
	const float step = 0.1;
	const float distance_step = 10.0;

	vec4 albedo = texture_fetch(buffer_albedo, pix);
	vec3 normal = 1.0 - texture_fetch(buffer_normal, pix).xyz * 2.0;
	vec3 pos = texture_fetch(buffer_position, pix).xyz;

	if (texture_fetch(buffer_normal, pix).xyz == vec3(1.0, 1.0, 1.0)) return albedo.rgb;

	vec3 result = albedo.xyz * ambient_intensity;

	vec3 N = normalize(normal);

	for (int i = 0; i < n_light_points; i++) {
		vec3 L = -normalize(light_points[i].position - pos);
		
		float dist = distance(pos, light_points[i].position);
		float attenuation = (root * sqrt(dist) * linear * dist + quadratic * dist * dist);
		attenuation = distance_step * ceil(attenuation / distance_step);

		float factor = max(dot(N, L), 0.01) * light_points[i].intensity / attenuation;
		//result.xyz = vec3(factor);

		factor = pow(abs(factor), 0.5);

		factor = round(factor / step) * step;

		result =
			result +
			albedo.rgb * light_points[i].color.rgb * factor;
		//result = N;
	}

	for (int i = 0; i < n_light_dirs; i++) {
		vec3 L = light_dirs[i].dir;

		float factor = max(dot(N, L), 0.00);
		factor *= factor;
		factor *= light_dirs[i].intensity;

		factor = pow(abs(factor), 0.5);

		result =
			result +
			albedo.rgb * light_dirs[i].color * factor * 1;
	}

	return result;
}


void main() {
	vec4 normal = texture_fetch(buffer_normal, text_coord);
	if (normal == vec4(0.0, 0.0, 0.0, 0.0)){
		discard;
	}

	if (debug == Debug_Default) {
		frag_color.rgb = light_pixel(text_coord);
		frag_color.a = texture_fetch(buffer_albedo, text_coord).a;
	}
	if (debug == Debug_Albedo) {
		frag_color = texture_fetch(buffer_albedo, text_coord);
	}
	if (debug == Debug_Normal) {
		frag_color = texture_fetch(buffer_normal, text_coord) * 2.0 - 1.0;
	}
	if (debug == Debug_Position) {
		frag_color = texture_fetch(buffer_position, text_coord);
	}
	if (debug == Debug_Depth) {
		frag_color = vec4(texture_fetch(buffer_position, text_coord).w);
	}

	glow_buffer = vec4(0);
	//frag_color = vec4(texture_fetch(buffer_position, text_coord).zzz, 1);
	frag_color.xyz += vec3(0.1 * pow(texture(buffer_ssao, text_coord).x, 5));
	//oofrag_color.rgb = texture_fetch(buffer_tag, text_coord).rgb;
	//frag_color = texture_fetch(buffer_velocity, text_coord);
}